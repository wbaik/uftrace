When sortKaway is used with references (&) operator,
    instead of copy constructor, performance gain is noticable. 

   Avg total   Min total   Max total  Function
  ==========  ==========  ==========  ====================================
  847.306 ms  847.306 ms  847.306 ms  main
  595.876 ms  595.876 ms  595.876 ms  sortKaway
  228.033 ms  228.033 ms  228.033 ms  std::sort
   44.333 us   10.403 us  187.321 us  std::priority_queue::pop
   42.521 us   10.185 us  185.861 us  std::pop_heap
   18.602 us   16.979 us   20.226 us  std::equal
   18.415 us   10.334 us   53.470 us  std::vector::emplace_back
   18.391 us   10.075 us   87.701 us  std::vector::empty
   18.383 us   10.058 us   87.896 us  std::priority_queue::empty
   18.050 us   10.033 us   64.570 us  std::vector::push_back
   17.989 us   10.465 us   46.905 us  std::vector::end
   17.947 us   14.286 us   33.342 us  std::move
   17.902 us   10.426 us   64.363 us  std::allocator_traits::construct
   17.183 us   10.588 us   49.066 us  std::vector::begin
   16.631 us   15.663 us   18.377 us  std::vector::operator []
   16.541 us   10.304 us   28.538 us  std::vector::front
   16.442 us   10.047 us   28.761 us  std::priority_queue::top
   16.355 us   11.104 us   42.322 us  std::vector::_M_emplace_back_aux
   16.167 us   10.045 us  127.823 us  std::push_heap
   16.143 us   15.548 us   17.419 us  rand
   16.132 us   12.635 us   21.625 us  std::forward
   15.816 us   10.859 us   22.000 us  std::vector::pop_back
   15.644 us   10.015 us  129.850 us  std::priority_queue::push
   15.335 us   10.630 us   21.801 us  std::allocator_traits::destroy
   13.056 us   13.056 us   13.056 us  std::ios_base::Init::~Init
   11.881 us   11.881 us   11.881 us  std::_Vector_base::~_Vector_base
   11.852 us   10.767 us   12.937 us  std::vector::~vector
   11.040 us   11.040 us   11.040 us  std::_Vector_base::_M_deallocate
   10.829 us   10.829 us   10.829 us  std::allocator_traits::deallocate
